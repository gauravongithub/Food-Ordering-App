{"ast":null,"code":"// import { useReducer } from \"react\";\n// import CartContext from \"./card-context\";\n// const defaultCartState = {\n//     items: [],\n//     totalAmount: 0\n// };\n// const cartReducer = (state,action) => {\n//     if(action.type === 'ADD'){        \n//         const updatedItems = state.items.concat(action.item);\n//         const existingCartItemIndex = state.item.findIndex(\n//             item => item.id === action.item.id\n//             );\n//             const existingCartItem = state.items[existingCartItemIndex];\n//         const updatedTotalAmount = state.totalAmount + action.item.price*action.item.amount;\n//         //let updatedItem;\n//         let updatedItems;\n//         if(existingCartItem){\n//            const updatedItem = {\n//                 ...existingCartItem,\n//                 amount: existingCartItem.amount + action.item.amount\n//             };\n//            updatedItems = [...state.items];\n//            updatedItems[existingCartItemIndex] = updatedItems;\n//         } else {\n//             updatedItems = state.items.concat(action.item);\n//         }\n//         return {\n//             items: updatedItems,\n//             totalAmount: updatedTotalAmount\n//         };\n//     }\n//     return defaultCartState;\n// }\n// const CartProvider = props =>{\n//     const [cartState, dispatchCartAction] = useReducer(cartReducer,defaultCartState);\n//     const addItemToCartHandler = item =>{\n//         dispatchCartAction({type: 'ADD', item:item});\n//     };\n//     const removeItemFromCartHandler = id =>{\n//         dispatchCartAction({type: 'REMOVE', id:id});\n//     };\n//     const cartContext = {\n//         items: cartState.items,\n//         totalAmount:cartState.totalAmount,\n//         addItem: addItemToCartHandler,\n//         removeItem: removeItemFromCartHandler\n//     };\n//     return <CartContext.Provider value={cartContext}>\n//         {props.children}\n//     </CartContext.Provider>\n// }\n// export default CartProvider;","map":{"version":3,"sources":["C:/Users/garim/OneDrive/Desktop/GauravWebDev/UdemyReact/ShoppingCart/01-starting-project/src/store/CartProvider.js"],"names":[],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA","sourcesContent":["// import { useReducer } from \"react\";\r\n// import CartContext from \"./card-context\";\r\n\r\n// const defaultCartState = {\r\n//     items: [],\r\n//     totalAmount: 0\r\n// };\r\n\r\n// const cartReducer = (state,action) => {\r\n    \r\n//     if(action.type === 'ADD'){        \r\n//         const updatedItems = state.items.concat(action.item);\r\n\r\n//         const existingCartItemIndex = state.item.findIndex(\r\n//             item => item.id === action.item.id\r\n//             );\r\n\r\n//             const existingCartItem = state.items[existingCartItemIndex];\r\n//         const updatedTotalAmount = state.totalAmount + action.item.price*action.item.amount;\r\n        \r\n//         //let updatedItem;\r\n//         let updatedItems;\r\n\r\n//         if(existingCartItem){\r\n//            const updatedItem = {\r\n//                 ...existingCartItem,\r\n//                 amount: existingCartItem.amount + action.item.amount\r\n//             };\r\n//            updatedItems = [...state.items];\r\n//            updatedItems[existingCartItemIndex] = updatedItems;\r\n//         } else {\r\n//             updatedItems = state.items.concat(action.item);\r\n\r\n//         }\r\n\r\n\r\n//         return {\r\n//             items: updatedItems,\r\n//             totalAmount: updatedTotalAmount\r\n            \r\n//         };\r\n//     }\r\n\r\n//     return defaultCartState;\r\n// }\r\n\r\n// const CartProvider = props =>{\r\n\r\n//     const [cartState, dispatchCartAction] = useReducer(cartReducer,defaultCartState);\r\n//     const addItemToCartHandler = item =>{\r\n//         dispatchCartAction({type: 'ADD', item:item});\r\n//     };\r\n//     const removeItemFromCartHandler = id =>{\r\n//         dispatchCartAction({type: 'REMOVE', id:id});\r\n//     };\r\n\r\n//     const cartContext = {\r\n//         items: cartState.items,\r\n//         totalAmount:cartState.totalAmount,\r\n//         addItem: addItemToCartHandler,\r\n//         removeItem: removeItemFromCartHandler\r\n//     };\r\n\r\n//     return <CartContext.Provider value={cartContext}>\r\n//         {props.children}\r\n//     </CartContext.Provider>\r\n// }\r\n\r\n// export default CartProvider;"]},"metadata":{},"sourceType":"module"}